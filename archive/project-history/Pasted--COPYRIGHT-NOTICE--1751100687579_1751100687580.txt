# ============================================================================
# COPYRIGHT NOTICE
# ============================================================================
# All forms of intellectual documents created from this chat belong to Daniel Guzman
# Copyright Â© Daniel Guzman - All Rights Reserved
# Created: 2025-06-28
# 
# This code and all associated documentation, concepts, and intellectual 
# property are the exclusive property of Daniel Guzman.
# ============================================================================

# FILE: backend/utils/helpers.py

import os
import datetime
import logging
from typing import Any, Dict, Optional

logger = logging.getLogger(__name__)

def log_api_call(service_name: str, endpoint: str, status: str, details: Optional[str] = None):
    log_message = f"API Call - Service: {service_name}, Endpoint: {endpoint}, Status: {status}"
    if details:
        log_message += f", Details: {details}"
    logger.info(log_message)

def validate_file_size(file_size: int, max_size_mb: int = 10) -> bool:
    """Validate file size in bytes against maximum size in MB"""
    max_size_bytes = max_size_mb * 1024 * 1024
    return file_size <= max_size_bytes

def extract_text_preview(text: str, max_length: int = 200) -> str:
    """Extract a preview of text content for logging"""
    if len(text) <= max_length:
        return text
    return text[:max_length] + "..."

def format_file_size(size_bytes: int) -> str:
    """Format file size in human readable format"""
    if size_bytes < 1024:
        return f"{size_bytes} B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes / 1024:.1f} KB"
    elif size_bytes < 1024 * 1024 * 1024:
        return f"{size_bytes / (1024 * 1024):.1f} MB"
    else:
        return f"{size_bytes / (1024 * 1024 * 1024):.1f} GB"

def create_error_response(message: str, status_code: int = 500) -> Dict[str, Any]:
    """Create standardized error response"""
    return {
        "error": True,
        "message": message,
        "status_code": status_code,
        "timestamp": datetime.datetime.now().isoformat()
    }

def validate_session_id(session_id: str) -> bool:
    """Validate session ID format"""
    import re
    # Check if it's a valid UUID format
    uuid_pattern = re.compile(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')
    return bool(uuid_pattern.match(session_id))

def clean_text_content(text: str) -> str:
    """Clean and normalize text content"""
    import re
    # Remove excessive whitespace
    text = re.sub(r'\s+', ' ', text)
    # Remove special characters that might cause issues
    text = re.sub(r'[^\w\s\.\,\!\?\-\(\)\[\]\{\}]', '', text)
    return text.strip()

def generate_timestamp_filename(prefix: str = "file", extension: str = "txt") -> str:
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"{prefix}_{timestamp}.{extension}"

def sanitize_filename(filename: str) -> str:
    sanitized = filename.replace(" ", "_")
    sanitized = "".join(c for c in sanitized if c.isalnum() or c in ("_", "-", "."))
    sanitized = os.path.normpath(sanitized)
    return sanitized